// lets create a command line tool like a calculator in rust

// lets fetch api in rust ( a weather app )
use reqwest::Error;
use serde_json::Value;
use std::io;
#[tokio::main]
async fn main() -> Result<(), Error>
{
    let mut location = String::new(); // create a variable to store the location
    println!("Enter the location: "); // ask the user to enter the location
    io::stdin().read_line(&mut location).expect("Failed to read line"); // read the line and store it in location variable
    let fetch_result = fetch_weather(&location.trim()).await?; // call the fetch_weather function and store the result in fetch_result variable
    println!("The weather in {} is {:?}", location, fetch_result); // print the result
    Ok(())
}

async fn fetch_weather(p0: &str) -> Result<(), Error>
{
    let url = format!("http://api.openweathermap.org/data/2.5/weather?q={}&appid=e8bf7b6a01f5c1aba0a5a1275b82476d", p0);
    let resp = reqwest::get(&url).await?.text().await?;
    let json: Value = serde_json::from_str(&resp).unwrap();
    if(resp == "404")
    {
        println!("The location you entered is not found");
        return Ok(());
    }



    let weather = json["weather"][0]["main"].as_str().unwrap();
    let description = json["weather"][0]["description"].as_str().unwrap();
    let temp_kelvin = json["main"]["temp"].as_f64().unwrap();
    let temp_celsius = temp_kelvin - 273.15;
    let humidity = json["main"]["humidity"].as_u64().unwrap();
    let wind_speed = json["wind"]["speed"].as_f64().unwrap();

    println!("Weather: {}", weather);
    println!("Description: {}", description);
    println!("Temperature: {:.2}Â°C", temp_celsius);
    println!("Humidity: {}%", humidity);
    println!("Wind Speed: {} m/s", wind_speed);
    println!("thanks fo using this app");
    Ok(())
}
// api key =" e8bf7b6a01f5c1aba0a5a1275b82476d"